/*
 * Copyright 2022 Grabtaxi Holdings PTE LTD (GRAB)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.api.internal.classpath.ModuleRegistry
import org.gradle.api.internal.project.ProjectInternal


buildscript {
    apply from: "../constants.gradle"
    dependencies {
        classpath libs.kotlin.gradle.plugin
        classpath libs.nexus.gradle.publish.plugin
        classpath libs.dokka.gradle.plugin
    }
}

plugins {
    id "java-gradle-plugin"
    alias(libs.plugins.kotlin.dsl)
    alias(libs.plugins.gradle.publish)
    id "maven-publish"
    id "idea"
}
apply plugin: "kotlin-kapt"

apply from: "gradle-scripts/functional-test.gradle"
apply from: "gradle/publish-root-config.gradle"
apply from: "gradle/publishing.gradle"

group = groupId
version = versionName
description = "A Gradle plugin to automate Bazel migration for Android projects"

repositories {
    google()
    mavenCentral()
}

idea {
    module {
        sourceDirs -= file("src/functionalTest/kotlin")
        testSourceDirs += file("src/functionalTest/kotlin")
        excludeDirs += file("src/test/projects")
    }
}

pluginBundle {
    website = project.findProperty("website")
    vcsUrl = project.findProperty("website")
    description = project.description
    tags = ["bazel migration", "buildscript generation", "automation"]
    mavenCoordinates {
        groupId = project.group
        artifactId = project.name
    }
}
gradlePlugin {
    plugins {
        grazelPlugin {
            id = "com.grab.grazel"
            implementationClass = "com.grab.grazel.GrazelGradlePlugin"
            displayName = "Grazel"
        }
    }
}

dependencies {
    implementation platform("org.jetbrains.kotlin:kotlin-bom")
    implementation libs.kotlin.gradle.plugin
    compileOnly libs.android.gradle.plugin

    implementation libs.google.guava
    implementation libs.picnic

    implementation libs.google.dagger
    kapt libs.google.dagger.compiler

    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit"
    testImplementation libs.google.truth
    testImplementation libs.junit
    testImplementation libs.kotlin.test
    testImplementation libs.android.gradle.plugin
    testImplementation gradleTestKit()
    testImplementation libs.mockito.kotlin

    /**
     * In Gradle 6.7-rc-1 BuildEventsListenerRegistry service is not created in we need it in order
     * to instantiate AGP. This creates a fake one and injects it
     * https://issuetracker.google.com/issues/193859160
     * https://github.com/gradle/gradle/issues/17783
     */
    def toolingApiBuildersJar = (project as ProjectInternal).services.get(ModuleRegistry.class)
        .getModule("gradle-tooling-api-builders")
        .classpath
        .asFiles
        .first()
    testRuntimeOnly(files(toolingApiBuildersJar))
}

tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask.class).configureEach {
    compilerOptions.jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_11)
    compilerOptions.freeCompilerArgs.add("-Xopt-in=kotlin.ExperimentalStdlibApi")
}

tasks.withType(Test).configureEach {
    testLogging {
        showStandardStreams = true
    }
}

afterEvaluate {
    // Lifecycle task to publish both plugin marker and the plugin to central.
    tasks.register("publishToMavenCentral") {
        group = "publishing"
        dependsOn(tasks.named("publishGrazelPluginPluginMarkerMavenPublicationToSonatypeRepository"))
        dependsOn(tasks.named("publishReleasePublicationToSonatypeRepository"))
    }
}
